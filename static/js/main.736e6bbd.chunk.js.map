{"version":3,"sources":["domain/BrailleConverter.ts","domain/Engine.ts","view/Game/Input/InputHandler.tsx","view/Game/Engine/GameEngine.tsx","view/Game/Status/GameStatus.tsx","view/Renderer/Url/Url.tsx","domain/GridUtils.ts","view/Renderer/Braille/BrailleRenderer.tsx","view/Game/Controls/GameControls.tsx","view/Game/Score/GameScore.tsx","App.tsx","index.tsx"],"names":["BrailleConverter","prefixHex","hex","length","getColumnBinary","rows","columnIndex","map","row","val","join","convert","areaWidth","braille","i","leftBinary","rightBinary","binaryString","replace","hexString","Number","parseInt","toString","buf","Buffer","partial","brailleEncode","encode","concat","GAME_STATUS","defaultHeap","Array","fill","InputHandler","handleKey","key","props","handleKeyDown","document","addEventListener","this","removeEventListener","Component","GameEngine","game","rotate","moveDown","moveLeft","moveRight","onUpdate","gameState","Engine","start","setInterval","GameStatus","status","statusMessage","INIT","WORK","OVER","PAUSE","Url","hash","window","location","GridUtils","mirror","reverse","transpose","col","projectSideways","BrailleRenderer","grid","projectedGrid","GameControls","className","GameScore","statistic","score","countLinesReduced","countDoubleLinesReduced","countTrippleLinesReduced","countQuadrupleLinesReduced","App","state","body","gameStatus","setGameState","setState","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.736e6bbd.chunk.js","sourcesContent":["import { Grid, Row } from \"tetris-engine\";\nimport brailleEncode from \"braille-encode\";\n\nexport class BrailleConverter {\n  private static prefixHex = (hex: string) => hex.length === 1 ? `0${hex}` : hex;\n\n  private static getColumnBinary = (rows: Grid, columnIndex: number) => {\n    return rows.map((row: Row) => row[columnIndex]).map(({ val }) => val).join('');\n  };\n\n  static convert = (rows: Grid, areaWidth: number): string => {\n    let braille = '';\n\n    for (let i = 0; i < areaWidth; i += 2) {\n      const leftBinary = BrailleConverter.getColumnBinary(rows, i);\n      const rightBinary = BrailleConverter.getColumnBinary(rows, i + 1);\n      const binaryString = `${leftBinary}${rightBinary}`.replace(/2/g, '1');\n      const binary = Number.parseInt(binaryString, 2);\n\n      const hexString = binary.toString(16);\n      const hex = BrailleConverter.prefixHex(hexString);\n      const buf = new Buffer(hex, 'hex');\n\n      const partial = brailleEncode.encode(buf);\n      braille = braille.concat(partial);\n    }\n\n    return braille;\n  };\n}\n","// @ts-ignore\nimport { Engine, GameState } from \"tetris-engine\";\n\nexport enum GAME_STATUS {\n  INIT = 0,\n  WORK = 1,\n  PAUSE = 2,\n  OVER = 3\n}\n\nconst areaHeight = 4;\nexport const areaWidth = 20;\nconst defaultHeap = new Array(areaHeight).fill(new Array(areaWidth).fill(0));\n\nexport const createEngine = (onUpdate: (gameState: GameState) => any) => new Engine(\n  areaHeight,\n  areaWidth,\n  onUpdate,\n  defaultHeap,\n);\n","import { Component } from 'react';\n\ntype Props = {\n  handleKeyDown: (key: SupportedKey) => any;\n};\n\nexport type SupportedKey = 'ArrowRight' | 'ArrowLeft' | 'ArrowUp' | 'ArrowDown';\n\nexport class InputHandler extends Component<Props> {\n  handleKey = ({ key }: KeyboardEvent) => this.props.handleKeyDown(key as SupportedKey);\n\n  componentDidMount(): void {\n    document.addEventListener(\"keydown\", this.handleKey);\n  }\n\n  componentWillUnmount(): void {\n    document.removeEventListener(\"keydown\", this.handleKey);\n  }\n\n  render() {\n    return null;\n  }\n}\n","import React, { Component } from 'react';\nimport { createEngine } from '../../../domain/Engine';\nimport { InputHandler, SupportedKey } from '../Input/InputHandler';\nimport { Engine, GameState } from 'tetris-engine';\n\ntype Props = {\n  onUpdate: (gameState: GameState) => any;\n}\n\nexport class GameEngine extends Component<Props> {\n  game?: Engine;\n\n  componentDidMount(): void {\n    this.game = createEngine((gameState: GameState) => this.props.onUpdate(gameState));\n    this.game.start();\n\n    const firstLevelInterval = 1000;\n    setInterval(() => {\n      this.game!.moveDown();\n    }, firstLevelInterval);\n  }\n\n  handleKeyDown = (key: SupportedKey) => {\n    const { game } = this;\n\n    switch (key) {\n      case 'ArrowRight':\n        game!.rotate();\n        break;\n      case 'ArrowLeft':\n        game!.moveDown();\n        break;\n      case 'ArrowUp':\n        game!.moveLeft();\n        break;\n      case 'ArrowDown':\n        game!.moveRight();\n        break;\n    }\n  };\n\n  render() {\n    return <InputHandler handleKeyDown={this.handleKeyDown} />;\n  }\n}\n","import { GAME_STATUS } from '../../../domain/Engine';\nimport React, { FunctionComponent } from 'react';\n\ntype Props = {\n  status: GAME_STATUS;\n}\n\nexport const GameStatus: FunctionComponent<Props> = ({ status }) => {\n  const statusMessage = {\n    [GAME_STATUS.INIT]: 'LOADING',\n    [GAME_STATUS.WORK]: 'IN PROGRESS',\n    [GAME_STATUS.OVER]: 'GAME OVER',\n    [GAME_STATUS.PAUSE]: 'PAUSED',\n  }[status];\n\n  return <h5>STATUS: {statusMessage}</h5>;\n};\n","import { FunctionComponent } from 'react';\n\ntype Props = {\n  hash: string;\n}\n\nexport const Url: FunctionComponent<Props> = ({ hash }) => {\n  window.location.hash = `|${hash}`;\n\n  return null;\n};\n","import { Grid } from 'tetris-engine';\n\nexport class GridUtils {\n  private static mirror = (rows: Grid) => {\n    return rows.map(row => [...row].reverse());\n  }\n\n  private static transpose = (rows: Grid) => {\n    return rows[0].map((col, i) => rows.map(row => row[i]));\n  }\n\n  static projectSideways = (rows: Grid) => {\n    return GridUtils.mirror(GridUtils.transpose(rows));\n  }\n}\n","import React, { FunctionComponent } from 'react';\nimport { Url } from '../Url/Url';\nimport { GridUtils } from '../../../domain/GridUtils';\nimport { Grid } from 'tetris-engine';\nimport { BrailleConverter } from '../../../domain/BrailleConverter';\nimport { areaWidth } from '../../../domain/Engine';\n\ntype Props = {\n  grid: Grid\n}\n\nexport const BrailleRenderer: FunctionComponent<Props> = ({ grid }) => {\n  if (!grid.length) {\n    return null;\n  }\n\n  const projectedGrid = GridUtils.projectSideways(grid);\n  const hash = BrailleConverter.convert(projectedGrid, areaWidth);\n\n  return <Url hash={hash} />;\n};\n","import React, { FunctionComponent } from 'react';\n\ntype Props = {};\n\nexport const GameControls: FunctionComponent<Props> = () => {\n  return (\n    <div className=\"card\">\n      <h3>Controls</h3>\n      <p>→ Rotate</p>\n      <p>← Move left</p>\n      <p>↑ Move up</p>\n      <p>↓ Move down</p>\n    </div>\n  );\n}\n","import React, { FunctionComponent } from 'react';\nimport { GameStatistic } from 'tetris-engine';\n\ntype Props = {\n  statistic: GameStatistic;\n}\n\nexport const GameScore: FunctionComponent<Props> = ({ statistic }) => {\n  const singleScore = statistic.countLinesReduced * 1 * 1;\n  const doubleScore = statistic.countDoubleLinesReduced * 2 * 3;\n  const tripleScore = statistic.countTrippleLinesReduced * 3 * 4;\n  const quadScore = statistic.countQuadrupleLinesReduced * 4 * 5;\n\n  const score = singleScore + doubleScore + tripleScore + quadScore;\n\n  return (\n    <h5>Score: {score}</h5>\n  )\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport { GameEngine } from './view/Game/Engine/GameEngine';\nimport { GAME_STATUS } from './domain/Engine';\nimport { GameState, GameStatistic } from 'tetris-engine';\nimport { GameStatus } from './view/Game/Status/GameStatus';\nimport { BrailleRenderer } from './view/Renderer/Braille/BrailleRenderer';\nimport { GameControls } from './view/Game/Controls/GameControls';\nimport { GameScore } from './view/Game/Score/GameScore';\n\ntype Props = {};\ntype State = { gameState: GameState };\n\nclass App extends Component<Props, State> {\n  state: State = {\n    gameState: { body: [], gameStatus: GAME_STATUS.INIT, statistic: {} as GameStatistic },\n  };\n\n  setGameState = (gameState: GameState) => {\n    this.setState({ gameState });\n    // console.log('$', gameState);\n  };\n\n  render() {\n    const { gameState } = this.state;\n    const { body, gameStatus, statistic } = gameState;\n\n    return (\n      <div className=\"App\">\n        <GameEngine onUpdate={this.setGameState} />\n        <BrailleRenderer grid={body} />\n\n        <header className=\"App-header\">\n          <h1>URL Tetris</h1>\n          <GameStatus status={gameStatus} />\n          <GameScore statistic={statistic} />\n\n          <GameControls />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}